BETS.report()
library(BETS)
BETS.report()
# Get the series with code 21864 (Production of Intermediate Goods Index, IBGE)
data <- BETS.get(21864)
# Keep last values for comparison with the forecasts
data_test <- window(data, start = c(2015,11), end = c(2016,4), frequency = 12)
data <- window(data, start = c(2002,1), end = c(2015,10), frequency = 12)
df <- BETS.ur_test(y = diff(data), type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
# Show the result of the tests
df
df$results
df <- BETS.ur_test(y = diff(data), type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
df <- BETS.ur_test(y = data, type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
df
df$results
df <- BETS.ur_test(y = diff(data), type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
df$results
df <- BETS.ur_test(y = diff(diff(data)), type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
df$results
df <- BETS.ur_test(y = data, type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
# Show the result of the tests
df$results
# Calculate the ACF of the residuals with a 99% confidence interval
BETS.corrgram(df$residuals,ci=0.99,style="normal",lag.max = 11)
df <- BETS.ur_test(y = data, type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
# Show the result of the tests
df$results
# Calculate the ACF of the residuals with a 99% confidence interval
BETS.corrgram(df$residuals,ci=0.95,style="normal",lag.max = 11)
df <- BETS.ur_test(y = data, type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
# Show the result of the tests
df$results
# Calculate the ACF of the residuals with a 99% confidence interval
BETS.corrgram(df$residuals,ci=0.95,style="normal",lag.max = 11)
ns_roots <- 0
d_ts <- data
# Dickey-Fuller tests loop
# Execution is interrupted when the null hypothesis is rejected
while(df$results[1,"statistic"]> df$results[1,"crit.val"]){
ns_roots <- ns_roots + 1
d_ts <- diff(d_ts)
df <- BETS.ur_test(y = d_ts, type = "none", lags = 6,
selectlags = "BIC", level = "5pct")
}
ns_roots
ns_roots <- 0
d_ts <- data
# Dickey-Fuller tests loop
# Execution is interrupted when the null hypothesis is rejected
while(df$results[1,"statistic"]> df$results[1,"crit.val"]){
ns_roots <- ns_roots + 1
d_ts <- diff(d_ts)
df <- BETS.ur_test(y = d_ts, type = "none", lags = 11,
selectlags = "BIC", level = "5pct")
}
ns_roots
df <- BETS.ur_test(y = data, type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
# Show the result of the tests
df$results
ns_roots <- 0
d_ts <- data
# Dickey-Fuller tests loop
# Execution is interrupted when the null hypothesis is rejected
while(df$results[1,"statistic"]> df$results[1,"crit.val"]){
ns_roots <- ns_roots + 1
d_ts <- diff(d_ts)
df <- BETS.ur_test(y = d_ts, type = "none", lags = 11,
selectlags = "BIC", level = "5pct")
}
ns_roots
df <- BETS.ur_test(y = data, type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
# Show the result of the tests
df$results
ns_roots <- 0
d_ts <- data
# Dickey-Fuller tests loop
# Execution is interrupted when the null hypothesis is rejected
while(df$results[1,"statistic"]> df$results[1,"crit.val"]){
ns_roots <- ns_roots + 1
d_ts <- diff(d_ts)
df <- BETS.ur_test(y = d_ts, type = "none", lags = 11,
selectlags = "BIC", level = "1pct")
}
ns_roots
ns_roots <- 0
d_ts <- data
# Dickey-Fuller tests loop
# Execution is interrupted when the null hypothesis is rejected
while(df$results[1,"statistic"]> df$results[1,"crit.val"]){
ns_roots <- ns_roots + 1
d_ts <- diff(d_ts)
df <- BETS.ur_test(y = d_ts, type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
}
ns_roots
df <- BETS.ur_test(y = data, type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
# Show the result of the tests
df$results
ns_roots <- 0
d_ts <- data
# Dickey-Fuller tests loop
# Execution is interrupted when the null hypothesis is rejected
while(df$results[1,"statistic"]> df$results[1,"crit.val"]){
ns_roots <- ns_roots + 1
d_ts <- diff(d_ts)
df <- BETS.ur_test(y = d_ts, type = "drift", lags = 11,
selectlags = "BIC", level = "1pct")
}
ns_roots
df <- BETS.ur_test(y = data, type = "none", lags = 11,
selectlags = "BIC", level = "1pct")
# Show the result of the tests
df$results
ns_roots <- 0
d_ts <- data
# Dickey-Fuller tests loop
# Execution is interrupted when the null hypothesis is rejected
while(df$results[1,"statistic"]> df$results[1,"crit.val"]){
ns_roots <- ns_roots + 1
d_ts <- diff(d_ts)
df <- BETS.ur_test(y = d_ts, type = "none", lags = 11,
selectlags = "BIC", level = "1pct")
}
ns_roots
BETS.corrgram(df$residuals,ci=0.99,style="normal",lag.max = 11)
nsdiffs(data, test = "ocsb")
library(mFilter)
library(mFilter)
trend = fitted(hpfilter(data))
dygraph(cbind(Series = data, Trend = trend), main = info[,"Description"]) %>%
dyRangeSelector(strokeColor = "gray", fillColor = "gray") %>%
dyAxis("y", label = info[,"Unit"])
library(dygraphs)
dygraph(cbind(Series = data, Trend = trend), main = info[,"Description"]) %>%
dyRangeSelector(strokeColor = "gray", fillColor = "gray") %>%
dyAxis("y", label = info[,"Unit"])
df <- BETS.get(11407, data.frame = T)
library(BETS)
df <- BETS.get(11407, data.frame = T)
library(BETS)
df <- BETS.get(11407, data.frame = T)
df <- df[-(1:30),2]
charts[[4]] <- window(ts(df, start = c(2000,1), frequency = 4),start = c(2006,1))
charts[[4]] <- window(ts(df, start = c(2000,1), frequency = 4),start = c(2006,1))
df
df <- BETS.get(11407, data.frame = T)
df
BETS.dashboard()
BETS.get("ST_100.0")
View(df)
